<%# borrowed from: http://bl.ocks.org/benjchristensen/2579619 %>
<%# commenting out all the rightaxis code until needed %>

<html>
	<head>
		<title>Test Coverage</title>
		<p>
		  Routes covered in test (%)
		</p>
		<script src="http://d3js.org/d3.v3.min.js" charset="utf-8"></script>


		<style>
			/* tell the SVG path to be a thin blue line without any area fill */
			path {
				stroke-width: 1;
				fill: none;
			}

			circle {
			  fill: #fff;
			  stroke: #000;
			}

			text {
			  font: 10px sans-serif;
			}
			
			.testedPercentages {
				stroke: steelblue;
			}

			.data2 {
				stroke: black;
			}

			.axis {
			  shape-rendering: crispEdges;
			}

			.x.axis line {
			  stroke: lightgrey;
			}

			.x.axis .minor {
			  stroke-opacity: .5;
			}

			.x.axis path {
			  display: none;
			}
			
			.x.axis text {
				font-size: 14;
			}

			.y.axis line, .y.axis path {
			  fill: none;
			  stroke: #000;
			}

			.y.axis text {
				font-size: 14;
			}

			.y.axisRight text {
				fill: black;
			}
			
			.y.axisLeft text {
				fill: steelblue;
			}
		</style>
	</head>
	<body>


	<div id="graph" class="aGraph" style="position:absolute;top:0px;left:0; float:left;"></div>


	<script>

		// pull in our data
// what on earth is wrong with the dates coming in and as used below!!??!?!
	    var testedDates = "<%= @tested_dates.to_json %>";
		var testedPercentages = JSON.parse( "<%= @tested_percentages.to_json %>" );
		var highestPercentage = d3.max(testedPercentages)

		// define dimensions of graph
		var m = [80, 80, 80, 80]; // margins [0top, 1right, 2bottom, 3left]
		var w = 900 - m[1] - m[3];	// width
		var h = 400 - m[0] - m[2]; // height

		// define the labels
		var xAxisLabel = "<%= @tested_x_axis_label %>";
		var yAxisLabel = "<%= @tested_y_axis_label %>";

// Why does the date range not work?
// https://github.com/mbostock/d3/wiki/Time-Scales
// var x = d3.time.scale().domain(testedDates).range([0, w]);
		// X scale will fit all values from data[] within pixels 0-w
		 var x = d3.scale.linear().domain([0, testedPercentages.length]).range([0, w]);

		// Y scale will fit values from 0-10 within pixels h-0 (Note the inverted domain for the y-scale: bigger is up!)
		var y = d3.scale.linear().domain([0, highestPercentage+20]).range([h, 0]);

		// create a line function that can convert data[] into x and y points
		var line1 = d3.svg.line()
			// assign the X function to plot our line as we wish
			.x(function(d,i) { 
				// verbose logging to show what's actually being done
				console.log('Plotting X1 value for data point: ' + d + ' using index: ' + i + ' to be at: ' + x(i) + ' using our xScale.');
				// return the X coordinate where we want to plot this datapoint
				return x(i); 
			})
			.y(function(d) { 
				// verbose logging to show what's actually being done
				console.log('Plotting Y value for data point: ' + d + ' to be at: ' + y(d) + " using our yScale.");
				// return the Y coordinate where we want to plot this datapoint
				return y(d); 
			})


// TODO? removing data2 / line2 for now			
//		// create a line function that can convert data[] into x and y points
//		var line2 = d3.svg.line()
//			// assign the X function to plot our line as we wish
//			.x(function(d,i) { 
//				// verbose logging to show what's actually being done
//				console.log('Plotting X2 value for data point: ' + d + ' using index: ' + i + ' to be at: ' + x(i) + ' using our xScale.');
				// return the X coordinate where we want to plot this datapoint
//				return x(i); 
//			})
//			.y(function(d) { 
//				// verbose logging to show what's actually being done
//				console.log('Plotting Y value for data point: ' + d + ' to be at: ' + y(d) + " using our yScale.");
//				// return the Y coordinate where we want to plot this datapoint
//				return y(d); 
//			})


			// Add an SVG element with the desired dimensions and margin.
			var graph = d3.select("#graph").append("svg:svg")
			      .attr("width", w + m[1] + m[3])
			      .attr("height", h + m[0] + m[2])
			    .append("svg:g")
			      .attr("transform", "translate(" + m[3] + "," + m[0] + ")");

			// create yAxis
		    var xAxis = d3.svg.axis().scale(x).tickSize(-h).tickSubdivide(true);

			// Add the x-axis.
			graph.append("svg:g")
			      .attr("class", "x axis")
			      .attr("transform", "translate(0," + h + ")")
			      .call(xAxis);

			// create left yAxis
			var yAxisLeft = d3.svg.axis().scale(y).ticks(highestPercentage/2).orient("left");

			// Add the y-axis to the left
			graph.append("svg:g")
			      .attr("class", "y axis axisLeft")
			      .attr("transform", "translate(-15,0)")
			  	  .call(yAxisLeft);

			// Add an x-axis label.
			graph.append("text")
			    .attr("class", "x label")
			    .attr("text-anchor", "end")
			    .attr("x", w)
			    .attr("y", h-6)
			    .text(xAxisLabel);

		    // Add an y-axis label.
			graph.append("text")
			    .attr("class", "y label")
			    .attr("text-anchor", "end")
			    .attr("y", 6)
			    .attr("dy", ".75em")
			    .attr("transform", "rotate(-90)")
			    .text(yAxisLabel);

			
			// add lines
			// do this AFTER the axes above so that the line is above the tick-lines
  			graph.append("svg:path").attr("d", line1(testedPercentages)).attr("class", "testedPercentages");

// TODO? removing data2 / line2 for now	
//  			graph.append("svg:path").attr("d", line2(data2)).attr("class", "data2");


	  </script>
	</body>
</html>
